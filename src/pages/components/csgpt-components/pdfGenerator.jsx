import { pdf, Document, Page, Text, View, StyleSheet, Font } from '@react-pdf/renderer'

Font.register({
  family: 'Roboto',
  src: 'https://cdnjs.cloudflare.com/ajax/libs/ink/3.1.10/fonts/Roboto/roboto-light-webfont.ttf'
})

const styles = StyleSheet.create({
  page: { 
    padding: 30,
    backgroundColor: '#f0f8ff',
    fontFamily: 'Roboto',
  },
  title: { 
    fontSize: 24, 
    marginBottom: 20, 
    textAlign: 'center',
    color: '#333',
  },
  questionAnswer: {
    marginBottom: 20,
    borderBottom: 1,
    borderBottomColor: '#ccc',
    paddingBottom: 10,
  },
  question: { 
    fontSize: 14, 
    marginTop: 10, 
    fontWeight: 'bold',
    color: '#4a90e2',
  },
  answer: { 
    fontSize: 12, 
    color: '#333',
    marginTop: 5,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 0,
    right: 0,
    textAlign: 'center',
    color: '#888',
    fontSize: 10,
  },
})

const convertMarkdownToPlainText = (markdown) => {
  let text = markdown.replace(/#{1,6}\s?/g, '')
  text = text.replace(/(\*\*|__)(.*?)\1/g, '$2')
  text = text.replace(/(\*|_)(.*?)\1/g, '$2')
  text = text.replace(/\[([^\]]+)\]$$([^$$]+)\)/g, '$1 ($2)')
  text = text.replace(/```[\s\S]*?```/g, (match) => {
    return match.replace(/```/g, '').trim()
  })
  text = text.replace(/`([^`]+)`/g, '$1')
  text = text.replace(/^\s*[-*+]\s+/gm, 'â€¢ ')
  text = text.replace(/^\s*\d+\.\s+/gm, (match, offset) => {
    const num = parseInt(match)
    return isNaN(num) ? match : `${num}. `
  })
  return text.trim()
}

export const generatePDF = async (messages) => {
  const history = messages.reduce((acc, message, index, array) => {
    if (message.type === "user") {
      acc.push({
        question: message.content,
        answer: array[index + 1]?.content || ""
      })
    }
    return acc
  }, [])

  const MyDocument = () => (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.title}>CSGPT Chat History</Text>
        {history.map((item, index) => (
          <View key={index} style={styles.questionAnswer}>
            <Text style={styles.question}>Q: {item.question}</Text>
            <Text style={styles.answer}>
              A: {convertMarkdownToPlainText(item.answer)}
            </Text>
          </View>
        ))}
        <Text style={styles.footer}>This response is generated by CSGPT AI</Text>
      </Page>
    </Document>
  )

  return await pdf(<MyDocument />).toBlob()
}